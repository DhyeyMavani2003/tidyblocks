'use strict'

import util from './util'
import DataFrame from './dataframe'

/**
 * Runtime environment that provides a program with data and captures a
 * program's outputs. This _could_ be unified with the `Program` class,
 * but separating them makes it easier to test transforms.
 */
export class Env {
  /**
   * Construct a new runtime environment.
   * @param ui The user interface bridge (a subclass of `UserInterface`).
   */
  constructor (ui) {
    this.ui = ui
    this.results = new Map()
    this.plots = new Map()
    this.stats = new Map()
    this.log = []
    this.unnamedCounter = 0
  }

  /**
   * Get a dataset by label. This checks the results generated by the program
   * first, then the user data stored in the UI.
   * @param {string} label Identifier for data.
   * @return Data table to be converted to dataframe.
   */
  getData (label) {
    util.check(label && (typeof label === 'string'),
               `Require non-empty string as dataset label`)
    if (this.results.has(label)) {
      return this.results.get(label)
    }
    if (this.ui.userData.has(label)) {
      return this.ui.userData.get(label)
    }
    util.fail(`Dataset ${label} not known`)
  }

  /**
   * Add a named dataset to results.
   * @param {string} label Identifier for data.
   * @param {Object[]} data Data table.
   */
  setResult (label, data) {
    util.check(label && (typeof label === 'string') && (label.length > 0),
               `Require non-empty string label for result`)
    util.check(data instanceof DataFrame,
               `Require dataframe for data`)
    if (this.results.has(label)) {
      this.appendLog('warn', `Result with label ${label} already exists`)
    }
    this.results.set(label, data)
  }

  /**
   * Get a Vega-Lite plot spec saved by a program.
   * @param label Name of plot result to get.
   */
  getPlot (label) {
    util.check(label && (typeof label === 'string'),
               `Require non-empty string as plot label`)
    util.check(this.plots.has(label),
               `Unknown plot label ${label}`)
    return this.plots.get(label)
  }

  /**
   * Store a Vega-Lite plot spec.
   * @param label Name of result.
   * @param {Object} spec Vega-Lite plot spec.
   */
  setPlot (label, spec) {
    util.check(label && (typeof label === 'string'),
               `Require non-empty string as plot label`)
    if (this.plots.has(label)) {
      this.appendLog('warn', `Plot with label ${label} already exists`)
    }
    this.plots.set(label, spec)
  }

  /**
   * Get a statistical result.
   * @param label Name of result to get.
   */
  getStats (label) {
    util.check(label && (typeof label === 'string'),
               `Require non-empty string as statistics label`)
    util.check(this.stats.has(label),
               `Unknown stats label ${label}`)
    return this.stats.get(label)
  }

  /**
   * Store a statistical result.
   * @param label Name of result to get.
   * @param {Object} stats Result to store.
   */
  setStats (label, stats) {
    util.check(label && (typeof label === 'string'),
               `Require non-empty string as stats label`)
    if (this.stats.has(label)) {
      this.appendLog('warn', `Statistics with label ${label} already exists`)
    }
    this.stats.set(label, stats)
  }

  /**
   * Append a message to the runtime log.
   * @param {string} level A logging level from `LOG_LEVELS`.
   * @param {string} message To save.
   */
  appendLog (level, message) {
    util.check(level && (typeof level === 'string') && Env.LOG_LEVELS.has(level),
               `Invalid or unknown log level "${level}"`)
    this.log.push([level, message])
  }

  /**
   * Get the serial number of the next unnamed result.
   * @return {number} Unique serial number of next unnamed result.
   */
  getNextUnnamedId () {
    this.unnamedCounter += 1
    return this.unnamedCounter
  }
}

/**
 * Logging levels (stored as a class member).
 */
Env.LOG_LEVELS = new Set(['log', 'warn', 'error'])
