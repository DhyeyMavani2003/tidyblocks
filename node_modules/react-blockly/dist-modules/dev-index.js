var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* eslint-disable import/no-extraneous-dependencies */

import React from 'react';
import ReactDOM from 'react-dom';
import Blockly from 'blockly';

import ReactBlocklyComponent from './index';
import ConfigFiles from './initContent/content';
import parseWorkspaceXml from './BlocklyHelper';

class TestEditor extends React.Component {
  constructor(props) {
    super(props);

    this.componentDidMount = () => {
      window.setTimeout(() => {
        this.setState({
          toolboxCategories: this.state.toolboxCategories.concat([{
            name: 'Text2',
            blocks: [{ type: 'text' }, {
              type: 'text_print',
              values: {
                TEXT: {
                  type: 'text',
                  shadow: true,
                  fields: {
                    TEXT: 'abc'
                  }
                }
              }
            }]
          }])
        });
      }, 2000);

      window.setTimeout(() => {
        this.setState({
          toolboxCategories: [...this.state.toolboxCategories.slice(0, this.state.toolboxCategories.length - 1), _extends({}, this.state.toolboxCategories[this.state.toolboxCategories.length - 1], {
            blocks: [{ type: 'text' }]
          })]
        });
      }, 4000);

      window.setTimeout(() => {
        this.setState({
          toolboxCategories: this.state.toolboxCategories.slice(0, this.state.toolboxCategories.length - 1)
        });
      }, 10000);
    };

    this.workspaceDidChange = workspace => {
      workspace.registerButtonCallback('myFirstButtonPressed', () => {
        alert('button is pressed');
      });
      const newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));
      document.getElementById('generated-xml').innerText = newXml;

      const code = Blockly.JavaScript.workspaceToCode(workspace);
      document.getElementById('code').value = code;
    };

    this.render = () => React.createElement(ReactBlocklyComponent.BlocklyEditor, {
      toolboxCategories: this.state.toolboxCategories,
      workspaceConfiguration: {
        grid: {
          spacing: 20,
          length: 3,
          colour: '#ccc',
          snap: true
        }
      },
      initialXml: ConfigFiles.INITIAL_XML,
      wrapperDivClassName: 'fill-height',
      workspaceDidChange: this.workspaceDidChange
    });

    this.state = {
      toolboxCategories: parseWorkspaceXml(ConfigFiles.INITIAL_TOOLBOX_XML)
    };
  }

}

window.addEventListener('load', () => {
  const editor = React.createElement(TestEditor);
  ReactDOM.render(editor, document.getElementById('blockly'));
});